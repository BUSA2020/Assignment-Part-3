Question 1 - Antun.K
____
a)
____
mysql> CREATE TABLE expression
    -> (gene VARCHAR(7), expr_value VARCHAR(5));
    
INSERT INTO expression VALUES
    -> ("alr1207", "8303"),
    -> ("alr2938", "10323"),
    -> ("alr3395", "1432"),
    -> ("alr3556", "8043"),
    -> ("alr4392", "729"),
    -> ("alr4851", "633"),
    -> ("alr5000", "5732");
    
SELECT * FROM expression;
+---------+------------+
| gene    | expr_value |
+---------+------------+
| alr1207 | 8303       |
| alr2938 | 10323      |
| alr3395 | 1432       |
| alr3556 | 8043       |
| alr4392 | 729        |
| alr4851 | 633        |
| alr5000 | 5732       |
+---------+------------+
7 rows in set (0.00 sec)
____
b)
____
mysql> CREATE TABLE expression
    -> (gene VARCHAR(7), function VARCHAR(30), metabolism VARCHAR(30));
    
INSERT INTO expression VALUES
    -> ("alr2938", "iron superoxide dismutase", "detoxification"),
    -> ("alr4392", "nitrogen-responsive regulator", "nitrogen assimilation"),
    -> ("alr4851", "preprotein translocase subunit", "protein and peptide secretion"),
    -> ("alr3395", "adenylosuccinate lyase", "purine biosynthesis"),
    -> ("alr1207", "uridylate kinase", "pryimidine biosynthesis",
    -> ("alr5000", "ctp synthetase", "pryimidine biosynthesis"),
    -> ("alr3556", "succinate dehydrogenase", "tac cycle");
____
c)
____  
sort -k 1n annotation.txt
sort -k 1n expressions.txt
join annotation expression
Question 2
____
d)
____  
1:
π metabolism, σ COUNT(metabolism) > 1
2:
SELECT 
metabolism,
COUNT(metabolism)
FROM
expression
GROUP BY metabolism
HAVING COUNT(metabolism) > 1;
__________________________________________________________
__________________________________________________________
Question 2:

a:
i) { a.LastName, a.FirstName | ∃ AllTourInfo (a) = coach = 'IS NULL' = a.LastName and a.FirstName}

ii) π LastName, FirstName σ coach=IS NULL (AllTourInfo) γ LastName, FirstName, coach

iii)
SELECT LastName, FirstName
FROM AllTourInfo
WHERE coach = IS NULL
ORDER BY LastName;
__________________________________________________________
b:

i) {a.LastName, a.FirstName | ∃ AllTourInfo (a) = (year=2006) = a.LastName}

ii) π LastName, FirstName σ Year=2010 (AllTourInfo) γ LastName, FirstName, Year

iii)
SELECT LastName, FirstName
FROM AllTourInfo
WHERE Year = 2010
ORDER BY LastName;
__________________________________________________________
c:

i) {a.LastName, a.FirstName | ∃ AllTourInfo (a) and ∃ a.FirstName and ∃ a.LastName and ∃ a.ID = 
a.year<>2006 and a.year<2006 and a.year>2006 = a.FirstName and a.LastName and a.ID}

ii) π FirstName,LastName,ID σ Year<>2006(AllTourInfo) σ Year>2006(AllTourInfo) σ Year<2006(AllTourInfo) γ FirstName, LastName, ID, Year

iii)
SELECT FirstName, LastName, ID
FROM AllTourInfo
WHERE
Year <> 2006 AND
Year > 2006 AND
Year < 2006
ORDER BY FirstName, LastName, ID
___________________________________________________________
d:
i) {m.FirstName, m.LastName, m.ID | ∃ Member (m) AND NOT ∃(y) Year (y)
(NOT ∃(e) Entry(e) AND e.ID = m.ID AND e.Year = y.ID)}

ii)
SELECT m.FirstName, m.LastName, m.ID
FROM Members m
WHERE NOT EXISTS
(
SELECT * FROM Years y
WHERE NOT EXISTS
( SELECT * FROM Entry e
WHERE e.ID = m.ID AND e.Year = y.ID
)
);
